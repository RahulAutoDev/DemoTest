pipeline {
    agent any
    environment {
        RELEASE ='20.04'
        DATE = new Date().format('yy.M')
        TAG = "${DATE}.${BUILD_NUMBER}"
    }
    stages {
        stage ('Clone') {
            steps {
                git branch: 'master', url: "https://github.com/RahulAutoDev/DemoTest.git"
            }
        }
        stage('Audit Tools') {
            steps {
                sh 'git --version'
                sh 'mvn --version'
            }
        }
        stage('Start Selenium Grid') {
            steps {
                
                sh 'docker-compose -f DemoJenkins/Docker-Compose/docker-compose.yaml up -d'
            }
        }

        stage('Build') {
        		agent any
        		environment {
        		LOG_LEVEL='INFO'
        		}
            steps {
                sh 'mvn -f DemoJenkins/pom.xml -B -DskipTests clean package'
                echo "Building release ${RELEASE} with log level ${LOG_LEVEL}...."
            }
            post {
                success {
                    echo "Now Archiving the Artifacts....."
                    archiveArtifacts artifacts: '**/*.jar'
                }
            }
        }
        stage('Test') {
            steps {
                sh 'mvn -f DemoJenkins/pom.xml test'
                echo "Testing release ${RELEASE}...."
            }
            post {
                always {
                    junit 'DemoJenkins/target/surefire-reports/*.xml'
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                	    def dockerfile = 'DemoJenkins/DockerFile' // Specify the path to your Dockerfile
                    docker.build("rahulautodocker/test_demo1:${TAG}", "-f ${dockerfile} .")
                }
            }
        }
        stage('Pushing Docker Image to Dockerhub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com/v2/', '0d7a2272-8c41-45b6-a425-636438909730') {
                        docker.image("rahulautodocker/test_demo1:${TAG}").push()
                        docker.image("rahulautodocker/test_demo1:${TAG}").push("latest")
                    }
                }
            }
        }
        stage('Deploy') {
        		input {
        			message 'Deploy?'
        			ok 'Do it!'
        			parameters {
        				string(name: 'TARGET_ENVIRONMENT', defaultValue: 'PROD', description: 'Target deployment environment')
        			}
        		}
        		steps {
        			echo "Deploying release...."
                    sh "docker stop test_demo1 | true"
                    sh "docker rm test_demo1 | true"
                    sh "docker run --name test_demo1 -d -p 9004:8080 rahulautodocker/test_demo1:${TAG}"
        		} 
            }
    }
    post {
        success {
            echo 'Build successful - marking it as SUCCESS'
        }
        failure {
            echo 'Build successful - marking it as failure'
        }
    }
}